{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/*\r\nuseReducer : useState의 확장판\r\n- 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리할 수 있음(initialize 객체, reducer 함수)\r\nㄴ 바깥에, 별도 파일에 작성해서 불러올 수 있다\r\n- 관리하는 상태 값이 여러개이고 구조가 복잡하다면 useState 대신 쓰면 편하다\r\n- setter를 여러 번 써야 한다면 이를 쓰는 것이 편할 수 있다\r\nㄴ 예)useState Hook을 사용하면서 setUsers와 setInputs가 동시에 쓰임\r\n  => initialize에 한번에 초기화, reducer 함수 하나로 type 값에 따른 값 변경\r\n*/\nimport React, { useReducer, useMemo } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport produce from 'immer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n} // useReducer에 사용되는 상태들을 초기화\n\n\nconst initialize = {\n  users: [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com',\n    active: false\n  }]\n}; // dispatch 함수 안의 객체 요소를 action.객체요소명 형식으로 불러올 수 있음\n// state.state객체 형식으로 각 state객체를 불러올 수 있음\n\nfunction reducer(state, action) {\n  // immer 패키지를 이용하면 불변성을 신경쓰지 않고 코딩해도 자동으로 불변성을 지켜준다.\n  // 기존 코드에 따라 더 짧아질 수 있지만, 더 길어질 수도 있으므로 적절히 사용 여부를 판단하는 것이 좋다.\n  // produce(객체, 함수) : 새로운 상태를 만들어 줌\n\n  /* \r\n      produce(함수) : 새로운 상태를 만들어 주는 함수가 됨(함수형 업데이트에 사용하면 딱임)\r\n    예) 함수형 업데이트에 사용\r\n    const [todo, setTodo] = useState({\r\n      text: 'Hello',\r\n      done: false\r\n    });\r\n      const onClick = useCallback(() => {\r\n      setTodo(\r\n        produce(draft => {\r\n          draft.done = !draft.done;\r\n        });\r\n      )\r\n    }, []);\r\n    */\n  switch (action.type) {\n    case \"CREATE_USER\":\n      return produce(state, draft => {\n        draft.users.push(action.user);\n      });\n\n    case \"TOGGLE_USER\":\n      return produce(state, draft => {\n        const user = draft.users.find(user => user.id === action.id);\n        user.active = !user.active;\n      });\n\n    case \"REMOVE_USER\":\n      return produce(state, draft => {\n        const userIndex = draft.users.findIndex(user => user.id === action.id);\n        draft.users.splice(userIndex, 1);\n      });\n\n    default:\n      return state;\n  } // switch (action.type) {\n  //   case \"CREATE_USER\":\n  //     return {\n  //       users: [...state.users, action.user],\n  //     };\n  //   case \"REMOVE_USER\":\n  //     return {\n  //       users: state.users.filter(user => user.id !== action.id)\n  //     };\n  //   case \"TOGGLE_USER\":\n  //     return {\n  //       users: state.users.map(user => \n  //         user.id === action.id ? {...user, active: !user.active} : user\n  //       )\n  //     };\n  //   default:\n  //     return state;\n  // }\n\n} // Context API와 dispatch를 이용하면, 여러 컴포넌트를 거쳐서 전달하는 것을 한큐에 해결할 수 있다\n// export 하여 내보내면 import {UserDispatch} from './App' 형태로 \n\n\nexport const UserDispatch = /*#__PURE__*/React.createContext(null);\n\nfunction App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialize);\n  const {\n    users\n  } = state;\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return (\n    /*#__PURE__*/\n    // UserDispatch.Provider 태그로 감싼 범위의 컴포넌트 안에서 얼마든지 Dispatch를 사용할 수 있다.\n    _jsxDEV(UserDispatch.Provider, {\n      value: dispatch,\n      children: [/*#__PURE__*/_jsxDEV(CreateUser, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(UserList, {\n        users: users\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790\\uC218 = \", count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"OnrwDrlSMqAj1WputpVCheCmw58=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["React","useReducer","useMemo","UserList","CreateUser","produce","countActiveUsers","users","console","log","filter","user","active","length","initialize","id","username","email","reducer","state","action","type","draft","push","find","userIndex","findIndex","splice","UserDispatch","createContext","App","dispatch","count"],"mappings":"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","sourcesContent":["/*\r\nuseReducer : useState의 확장판\r\n- 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리할 수 있음(initialize 객체, reducer 함수)\r\nㄴ 바깥에, 별도 파일에 작성해서 불러올 수 있다\r\n- 관리하는 상태 값이 여러개이고 구조가 복잡하다면 useState 대신 쓰면 편하다\r\n- setter를 여러 번 써야 한다면 이를 쓰는 것이 편할 수 있다\r\nㄴ 예)useState Hook을 사용하면서 setUsers와 setInputs가 동시에 쓰임\r\n  => initialize에 한번에 초기화, reducer 함수 하나로 type 값에 따른 값 변경\r\n*/\r\nimport React, {useReducer, useMemo} from 'react';\r\nimport UserList from './UserList';\r\nimport CreateUser from './CreateUser';\r\nimport produce from 'immer';\r\n\r\nfunction countActiveUsers(users) {\r\n  console.log('활성 사용자 수를 세는중...');\r\n  return users.filter(user => user.active).length;\r\n}\r\n\r\n// useReducer에 사용되는 상태들을 초기화\r\nconst initialize = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      username: 'velopert',\r\n      email: 'public.velopert@gmail.com',\r\n      active: true\r\n   },\r\n   {\r\n      id: 2,\r\n      username: 'tester',\r\n      email: 'tester@example.com',\r\n      active: false\r\n    },\r\n    {\r\n      id: 3,\r\n      username: 'liz',\r\n      email: 'liz@example.com',\r\n      active: false\r\n   }\r\n  ]\r\n};\r\n\r\n// dispatch 함수 안의 객체 요소를 action.객체요소명 형식으로 불러올 수 있음\r\n// state.state객체 형식으로 각 state객체를 불러올 수 있음\r\nfunction reducer(state, action) {\r\n  // immer 패키지를 이용하면 불변성을 신경쓰지 않고 코딩해도 자동으로 불변성을 지켜준다.\r\n  // 기존 코드에 따라 더 짧아질 수 있지만, 더 길어질 수도 있으므로 적절히 사용 여부를 판단하는 것이 좋다.\r\n  // produce(객체, 함수) : 새로운 상태를 만들어 줌\r\n  /* \r\n\r\n    produce(함수) : 새로운 상태를 만들어 주는 함수가 됨(함수형 업데이트에 사용하면 딱임)\r\n    예) 함수형 업데이트에 사용\r\n    const [todo, setTodo] = useState({\r\n      text: 'Hello',\r\n      done: false\r\n    });\r\n\r\n    const onClick = useCallback(() => {\r\n      setTodo(\r\n        produce(draft => {\r\n          draft.done = !draft.done;\r\n        });\r\n      )\r\n    }, []);\r\n\r\n  */\r\n  switch (action.type) {\r\n    case \"CREATE_USER\" :\r\n      return produce(state, draft => {\r\n        draft.users.push(action.user);\r\n      });\r\n    case \"TOGGLE_USER\" :\r\n      return produce(state, draft => {\r\n        const user = draft.users.find(user => user.id === action.id);\r\n        user.active = !user.active;\r\n      });\r\n    case \"REMOVE_USER\" :\r\n      return produce(state, draft => {\r\n        const userIndex = draft.users.findIndex(user => user.id === action.id);\r\n        draft.users.splice(userIndex, 1);\r\n      });\r\n    default :\r\n      return state;\r\n  }\r\n  // switch (action.type) {\r\n  //   case \"CREATE_USER\":\r\n  //     return {\r\n  //       users: [...state.users, action.user],\r\n  //     };\r\n  //   case \"REMOVE_USER\":\r\n  //     return {\r\n  //       users: state.users.filter(user => user.id !== action.id)\r\n  //     };\r\n  //   case \"TOGGLE_USER\":\r\n  //     return {\r\n  //       users: state.users.map(user => \r\n  //         user.id === action.id ? {...user, active: !user.active} : user\r\n  //       )\r\n  //     };\r\n  //   default:\r\n  //     return state;\r\n  // }\r\n}\r\n\r\n// Context API와 dispatch를 이용하면, 여러 컴포넌트를 거쳐서 전달하는 것을 한큐에 해결할 수 있다\r\n// export 하여 내보내면 import {UserDispatch} from './App' 형태로 \r\nexport const UserDispatch = React.createContext(null);\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialize);\r\n  \r\n  const {users} = state;\r\n\r\n  const count = useMemo(() => countActiveUsers(users), [users]);\r\n\r\n  return (\r\n    // UserDispatch.Provider 태그로 감싼 범위의 컴포넌트 안에서 얼마든지 Dispatch를 사용할 수 있다.\r\n    <UserDispatch.Provider value={dispatch}>\r\n      <CreateUser/>\r\n      <UserList users={users}/>\r\n      <div>활성사용자수 = {count}</div>\r\n    </UserDispatch.Provider>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}