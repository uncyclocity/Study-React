{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\InputSample.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputSample() {\n  _s();\n\n  // 각각의 input에 대해 값을 지정함\n  const [inputs, setInputs] = useState({\n    name: '',\n    nickname: ''\n  }); // DOM을 선택하기 위해 useRef 함수 사용\n\n  const nameInput = useRef(); // 비구조화 할당 이용하여 각 input의 값을 추출함\n\n  const {\n    name,\n    nickname\n  } = inputs;\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    console.log(value + \", \" + name);\n    console.log(inputs); // 기존 객체를 수정하는 방식이 아닌, 새 객체를 만들어서 불변성을 지킨다.\n    // 만약, input[name] = value 방식으로 했으면 값을 변경해도 리렌더링이 되지 않음\n\n    setInputs({ // ES6 -> Spread 이용하여 객체의 내용을 모두 펼쳐서 기존 객체를 복사함\n      ...inputs,\n      // name 키를 가진 값을 value로 설정함\n      [name]: value\n    });\n  };\n\n  const onReset = () => {\n    setInputs({\n      name: '',\n      nickname: ''\n    });\n    nameInput.current.focus();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"name\",\n      placeholder: \"\\uC774\\uB984\",\n      onChange: onChange,\n      value: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"nickname\",\n      placeholder: \"\\uB2C9\\uB124\\uC784\",\n      onChange: onChange,\n      value: nickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onReset,\n      children: \"\\uCD08\\uAE30\\uD654\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\uAC12: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), name, \" (\", nickname, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputSample, \"ttU3yxikbF963dXTTusuS8VoQ0M=\");\n\n_c = InputSample;\nexport default InputSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSample\");","map":{"version":3,"sources":["C:/react/study_react/src/InputSample.js"],"names":["useState","InputSample","inputs","setInputs","name","nickname","nameInput","useRef","onChange","e","value","target","console","log","onReset","current","focus"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;AAEA,SAASC,WAAT,GAAwB;AAAA;;AACpB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC;AACjCI,IAAAA,IAAI,EAAE,EAD2B;AAEjCC,IAAAA,QAAQ,EAAE;AAFuB,GAAD,CAApC,CAFoB,CAOpB;;AACA,QAAMC,SAAS,GAAGC,MAAM,EAAxB,CARoB,CAUpB;;AACA,QAAM;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBH,MAA3B;;AAEA,QAAMM,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAM;AAAEC,MAAAA,KAAF;AAASN,MAAAA;AAAT,QAAkBK,CAAC,CAACE,MAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,GAAG,IAAR,GAAeN,IAA3B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ,EAHoB,CAIpB;AACA;;AACAC,IAAAA,SAAS,CAAC,EACN;AACA,SAAGD,MAFG;AAGN;AACA,OAACE,IAAD,GAAQM;AAJF,KAAD,CAAT;AAMH,GAZD;;AAcA,QAAMI,OAAO,GAAG,MAAM;AAClBX,IAAAA,SAAS,CAAC;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAAD,CAAT;AAKAC,IAAAA,SAAS,CAACS,OAAV,CAAkBC,KAAlB;AACH,GAPD;;AASA,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,cAA/B;AAAoC,MAAA,QAAQ,EAAER,QAA9C;AAAwD,MAAA,KAAK,EAAEJ;AAA/D;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,WAAW,EAAC,oBAAnC;AAAyC,MAAA,QAAQ,EAAEI,QAAnD;AAA6D,MAAA,KAAK,EAAEH;AAApE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAES,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKV,IAFL,QAEaC,QAFb;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA/CQJ,W;;KAAAA,W;AAiDT,eAAeA,WAAf","sourcesContent":["import {useState} from 'react';\r\n\r\nfunction InputSample () {\r\n    // 각각의 input에 대해 값을 지정함\r\n    const [inputs, setInputs] = useState({\r\n        name: '',\r\n        nickname: ''\r\n    }); \r\n\r\n    // DOM을 선택하기 위해 useRef 함수 사용\r\n    const nameInput = useRef();\r\n\r\n    // 비구조화 할당 이용하여 각 input의 값을 추출함\r\n    const { name, nickname } = inputs;\r\n\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target;\r\n        console.log(value + \", \" + name);\r\n        console.log(inputs);\r\n        // 기존 객체를 수정하는 방식이 아닌, 새 객체를 만들어서 불변성을 지킨다.\r\n        // 만약, input[name] = value 방식으로 했으면 값을 변경해도 리렌더링이 되지 않음\r\n        setInputs({\r\n            // ES6 -> Spread 이용하여 객체의 내용을 모두 펼쳐서 기존 객체를 복사함\r\n            ...inputs,\r\n            // name 키를 가진 값을 value로 설정함\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const onReset = () => {\r\n        setInputs({\r\n            name: '',\r\n            nickname: ''\r\n        });\r\n\r\n        nameInput.current.focus();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input name=\"name\" placeholder=\"이름\" onChange={onChange} value={name}/>\r\n            <input name=\"nickname\" placeholder=\"닉네임\" onChange={onChange} value={nickname}/>\r\n            <button onClick={onReset}>초기화</button>\r\n            <div>\r\n                <b>값: </b>\r\n                {name} ({nickname})\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputSample;"]},"metadata":{},"sourceType":"module"}