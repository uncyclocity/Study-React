{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\Counter.js\",\n    _s = $RefreshSig$();\n\n// 리액트 패키지에서 'useState' 라는 함수를 불러와줌\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Counter() {\n  _s();\n\n  // 컴포넌트에서 동적인 값은 '상태'라고 부른다\n  // 'useState'를 이용하면 컴포넌트에서 상태 관리를 할 수 있다.\n  // 즉, 동적인 값을 조작할 수 있다는 것이다.\n  // 배열 비구조화 할당을 통해 useState 함수의 반환값인 배열에서 각 원소를 추출하였음\n  const [number, setNumber] = useState(0);\n\n  const onIncrease = () => {\n    setNumber(prevNumber => prevNumber + 1);\n  };\n\n  const onDecrease = () => {\n    setNumber(prevNumber => prevNumber + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onIncrease,\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onDecrease,\n      children: \"-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Counter, \"G5PFX1wnjBJODPcJAktOglW1raM=\");\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["C:/react/study_react/src/Counter.js"],"names":["useState","Counter","number","setNumber","onIncrease","prevNumber","onDecrease"],"mappings":";;;AAAA;AACA,SAAQA,QAAR,QAAuB,OAAvB;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf;AACA;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CAAD,CAApC;;AAEA,QAAMI,UAAU,GAAG,MAAM;AACrBD,IAAAA,SAAS,CAACE,UAAU,IAAIA,UAAU,GAAG,CAA5B,CAAT;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACrBH,IAAAA,SAAS,CAACE,UAAU,IAAIA,UAAU,GAAG,CAA5B,CAAT;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAQ,MAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAvBQL,O;;KAAAA,O;AAyBT,eAAeA,OAAf","sourcesContent":["// 리액트 패키지에서 'useState' 라는 함수를 불러와줌\r\nimport {useState} from 'react';\r\n\r\nfunction Counter() {\r\n    // 컴포넌트에서 동적인 값은 '상태'라고 부른다\r\n    // 'useState'를 이용하면 컴포넌트에서 상태 관리를 할 수 있다.\r\n    // 즉, 동적인 값을 조작할 수 있다는 것이다.\r\n    // 배열 비구조화 할당을 통해 useState 함수의 반환값인 배열에서 각 원소를 추출하였음\r\n    const [number, setNumber] = useState(0);\r\n\r\n    const onIncrease = () => {\r\n        setNumber(prevNumber => prevNumber + 1);\r\n    }\r\n\r\n    const onDecrease = () => {\r\n        setNumber(prevNumber => prevNumber + 1);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>{number}</h1>\r\n            {/* 리엑트에서 엘리먼트에 이벤트를 설정해줄 때는 on이벤트이름 = {실행할함수} 형식으로 설정해주어야 한다 */}\r\n            <button onClick={onIncrease}>+1</button>\r\n            <button onClick={onDecrease}>-1</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}