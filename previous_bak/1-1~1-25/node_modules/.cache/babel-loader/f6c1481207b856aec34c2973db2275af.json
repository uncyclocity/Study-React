{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useMemo } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...'); //return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  _s();\n\n  // CreateUser의 입력값에 해당하는 상태들을 초기화\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  }); // inputs의 각각의 값이 배열 비구조화 할당을 통해 각 변수에 들어감\n\n  const {\n    username,\n    email\n  } = inputs; // 입력 값이 바뀐 경우 상태 변경\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  }; // 배열의 상태를 초기화\n\n\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com',\n    active: false\n  }]); // useRef를 사용할 때 파라미터를 넣어 줄 경우, 파라미터 값이 .current의 기본 값이 된다.\n  // 값을 수정할 때는 .current 값을 수정, 조회 할 때도 .current 값을 조회하면 됨\n\n  const nextId = useRef(4); // 등록 버튼을 눌렀을 때 실행될 함수\n\n  const onCreate = () => {\n    // onChange 함수를 통해 변경된 상태값이 들어간다\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    }; // 배열 상태 변경\n\n    setUsers([...users, user]); // 인풋 상태 빈 값으로 초기화\n\n    setInputs({\n      username: '',\n      email: ''\n    }); // nextId 변수 +1\n\n    nextId.current += 1;\n  };\n\n  const onRemove = id => {\n    // Array.prototype.filter()를 이용하여\n    // 테스트를 통과하는 배열의 요소만 쭈압쭈압 뽑아서 새 배열로 반환함\n    setUsers(users.filter(user => user.id !== id));\n  }; // 해당 id와 맞는 요소의 user.active 값을 반전시킨 배열을 반환하여 상태를 바꾼다.\n\n\n  const onToggle = id => {\n    setUsers(users.map(user => user.id === id ? { ...user,\n      active: !user.active\n    } : user));\n  }; // useMemo(연산 정의 함수, deps)\n  // deps 배열 안의 내용이 바뀌면 첫번째 파라미터에 등록한 함수를 호출하여 값을 연산함\n\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      onChange: onChange,\n      onCreate: onCreate,\n      username: username,\n      email: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790\\uC218 = \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"oULmlP8cclJeLGZy3m3OX+6OwUI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["useRef","useState","useMemo","UserList","CreateUser","countActiveUsers","users","console","log","App","inputs","setInputs","username","email","onChange","e","name","value","target","setUsers","id","active","nextId","onCreate","user","current","onRemove","filter","onToggle","map","count"],"mappings":"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","sourcesContent":["import {useRef, useState, useMemo} from 'react';\r\nimport UserList from './UserList';\r\nimport CreateUser from './CreateUser';\r\n\r\nfunction countActiveUsers(users) {\r\n  console.log('활성 사용자 수를 세는중...');\r\n  //return users.filter(user => user.active).length;\r\n}\r\n\r\nfunction App() {\r\n  // CreateUser의 입력값에 해당하는 상태들을 초기화\r\n  const [inputs, setInputs] = useState({\r\n    username: '',\r\n    email: ''\r\n  });\r\n\r\n  // inputs의 각각의 값이 배열 비구조화 할당을 통해 각 변수에 들어감\r\n  const {username, email} = inputs;\r\n\r\n  // 입력 값이 바뀐 경우 상태 변경\r\n  const onChange = e => {\r\n    const {name, value} = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  // 배열의 상태를 초기화\r\n  const [users, setUsers] = useState([\r\n    {\r\n        id: 1,\r\n        username: 'velopert',\r\n        email: 'public.velopert@gmail.com',\r\n        active: true\r\n    },\r\n    {\r\n        id: 2,\r\n        username: 'tester',\r\n        email: 'tester@example.com',\r\n        active: false\r\n    },\r\n    {\r\n        id: 3,\r\n        username: 'liz',\r\n        email: 'liz@example.com',\r\n        active: false\r\n    }\r\n  ]);\r\n\r\n  // useRef를 사용할 때 파라미터를 넣어 줄 경우, 파라미터 값이 .current의 기본 값이 된다.\r\n  // 값을 수정할 때는 .current 값을 수정, 조회 할 때도 .current 값을 조회하면 됨\r\n  const nextId = useRef(4);\r\n\r\n  // 등록 버튼을 눌렀을 때 실행될 함수\r\n  const onCreate = () => {\r\n    // onChange 함수를 통해 변경된 상태값이 들어간다\r\n    const user = {\r\n      id: nextId.current,\r\n      username,\r\n      email\r\n    };\r\n\r\n    // 배열 상태 변경\r\n    setUsers([...users, user]);\r\n\r\n    // 인풋 상태 빈 값으로 초기화\r\n    setInputs({\r\n      username: '',\r\n      email: ''\r\n    });\r\n\r\n    // nextId 변수 +1\r\n    nextId.current += 1;\r\n  };\r\n\r\n  const onRemove = id => {\r\n    // Array.prototype.filter()를 이용하여\r\n    // 테스트를 통과하는 배열의 요소만 쭈압쭈압 뽑아서 새 배열로 반환함\r\n    setUsers(users.filter(user => user.id !== id));\r\n  };\r\n\r\n  // 해당 id와 맞는 요소의 user.active 값을 반전시킨 배열을 반환하여 상태를 바꾼다.\r\n  const onToggle = id => {\r\n    setUsers(\r\n      users.map(user =>\r\n        user.id === id ? {...user, active: !user.active} : user\r\n      )\r\n    );\r\n  };\r\n\r\n  // useMemo(연산 정의 함수, deps)\r\n  // deps 배열 안의 내용이 바뀌면 첫번째 파라미터에 등록한 함수를 호출하여 값을 연산함\r\n  const count = useMemo(() => countActiveUsers(users), [users]);\r\n\r\n  return (\r\n    <>\r\n      <CreateUser \r\n        onChange={onChange}\r\n        onCreate={onCreate}\r\n        username={username}\r\n        email={email}\r\n      />\r\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle}/>\r\n      <div>활성사용자수 = {count}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}