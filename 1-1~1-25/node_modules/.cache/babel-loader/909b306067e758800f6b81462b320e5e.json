{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/*\r\nuseReducer : useState의 확장판\r\n- 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리할 수 있음(initialize 객체, reducer 함수)\r\nㄴ 바깥에, 별도 파일에 작성해서 불러올 수 있다\r\n- 관리하는 상태 값이 여러개이고 구조가 복잡하다면 useState 대신 쓰면 편하다\r\n- setter를 여러 번 써야 한다면 이를 쓰는 것이 편할 수 있다\r\nㄴ 예)useState Hook을 사용하면서 setUsers와 setInputs가 동시에 쓰임\r\n  => initialize에 한번에 초기화, reducer 함수 하나로 key 값에 따른 값 변경\r\n*/\nimport { useReducer, useRef, useMemo, useCallback } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n} // useReducer에 사용되는 상태들을 초기화\n\n\nconst initialize = {\n  inputs: {\n    username: '',\n    email: ''\n  },\n  users: [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com',\n    active: false\n  }]\n}; // dispatch 함수 안의 객체 요소를 action.객체요소명 형식으로 불러올 수 있음\n// state.state객체 형식으로 각 state객체를 불러올 수 있음\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"CHANGE_INPUT\":\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.name]: action.value //state.inputs.[action.name] => state.inputs[usename/email]\n\n        }\n      };\n\n    case \"CREATE_USER\":\n      return {\n        users: [...state.users, action.user],\n        inputs: { ...state.inputs,\n          username: '',\n          email: ''\n        }\n      };\n\n    case \"REMOVE_USER\":\n      return { ...state,\n        users: state.users.filter(user => user.id !== action.id)\n      };\n\n    case \"TOGGLE_USER\":\n      return { ...state,\n        users: state.users.map(user => user.id === action.id ? { ...user,\n          active: !user.active\n        } : user)\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n}\n\nfunction App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialize);\n  const {\n    users\n  } = state;\n  const nextId = useRef(4);\n  const {\n    username,\n    email\n  } = state.inputs;\n  console.log(state);\n  const onChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    dispatch({\n      type: \"CHANGE_INPUT\",\n      name,\n      value\n    });\n  }, []);\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: \"CREATE_USER\",\n      user: {\n        id: nextId.current,\n        username,\n        email\n      }\n    });\n    nextId.current += 1;\n  }, [username, email]);\n  const onRemove = useCallback(id => {\n    dispatch({\n      type: \"REMOVE_USER\",\n      id\n    });\n  }, []);\n  const onToggle = useCallback(id => {\n    dispatch({\n      type: \"TOGGLE_USER\",\n      id\n    });\n  }, []);\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      onChange: onChange,\n      onCreate: onCreate,\n      username: username,\n      email: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790\\uC218 = \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"+M9MDLHiEyldpo4pj26OzkTqx8g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["useReducer","useRef","useMemo","useCallback","UserList","CreateUser","countActiveUsers","users","console","log","filter","user","active","length","initialize","inputs","username","email","id","reducer","state","action","type","name","value","map","App","dispatch","nextId","onChange","e","target","onCreate","current","onRemove","onToggle","count"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,UAAR,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,WAArC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,SAAOF,KAAK,CAACG,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,MAA1B,EAAkCC,MAAzC;AACD,C,CAED;;;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,KAAK,EAAE;AAFD,GADS;AAKjBV,EAAAA,KAAK,EAAE,CACL;AACEW,IAAAA,EAAE,EAAE,CADN;AAEEF,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,KAAK,EAAE,2BAHT;AAIEL,IAAAA,MAAM,EAAE;AAJV,GADK,EAON;AACGM,IAAAA,EAAE,EAAE,CADP;AAEGF,IAAAA,QAAQ,EAAE,QAFb;AAGGC,IAAAA,KAAK,EAAE,oBAHV;AAIGL,IAAAA,MAAM,EAAE;AAJX,GAPM,EAaL;AACEM,IAAAA,EAAE,EAAE,CADN;AAEEF,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE,iBAHT;AAIEL,IAAAA,MAAM,EAAE;AAJV,GAbK;AALU,CAAnB,C,CA2BA;AACA;;AACA,SAASO,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,cAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELL,QAAAA,MAAM,EAAE,EACN,GAAGK,KAAK,CAACL,MADH;AAEN,WAACM,MAAM,CAACE,IAAR,GAAeF,MAAM,CAACG,KAFhB,CAGN;;AAHM;AAFH,OAAP;;AAQF,SAAK,aAAL;AACE,aAAO;AACLjB,QAAAA,KAAK,EAAE,CAAC,GAAGa,KAAK,CAACb,KAAV,EAAiBc,MAAM,CAACV,IAAxB,CADF;AAELI,QAAAA,MAAM,EAAE,EACN,GAAGK,KAAK,CAACL,MADH;AAENC,UAAAA,QAAQ,EAAE,EAFJ;AAGNC,UAAAA,KAAK,EAAE;AAHD;AAFH,OAAP;;AAQF,SAAK,aAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELb,QAAAA,KAAK,EAAEa,KAAK,CAACb,KAAN,CAAYG,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYG,MAAM,CAACH,EAA9C;AAFF,OAAP;;AAIF,SAAK,aAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELb,QAAAA,KAAK,EAAEa,KAAK,CAACb,KAAN,CAAYkB,GAAZ,CAAgBd,IAAI,IACzBA,IAAI,CAACO,EAAL,KAAYG,MAAM,CAACH,EAAnB,GAAwB,EAAC,GAAGP,IAAJ;AAAUC,UAAAA,MAAM,EAAE,CAACD,IAAI,CAACC;AAAxB,SAAxB,GAA0DD,IADrD;AAFF,OAAP;;AAMF;AACE,aAAOS,KAAP;AAhCJ;;AAiCC;AACF;;AAGD,SAASM,GAAT,GAAe;AAAA;;AACb,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoB3B,UAAU,CAACmB,OAAD,EAAUL,UAAV,CAApC;AACA,QAAM;AAACP,IAAAA;AAAD,MAAUa,KAAhB;AACA,QAAMQ,MAAM,GAAG3B,MAAM,CAAC,CAAD,CAArB;AACA,QAAM;AAACe,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBG,KAAK,CAACL,MAAhC;AAEAP,EAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AAEA,QAAMS,QAAQ,GAAG1B,WAAW,CAAC2B,CAAC,IAAI;AAChC,UAAM;AAACP,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBM,CAAC,CAACC,MAAxB;AACAJ,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAE,cADC;AAEPC,MAAAA,IAFO;AAGPC,MAAAA;AAHO,KAAD,CAAR;AAKD,GAP2B,EAOzB,EAPyB,CAA5B;AASA,QAAMQ,QAAQ,GAAG7B,WAAW,CAAC,MAAM;AACjCwB,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAE,aADC;AAEPX,MAAAA,IAAI,EAAE;AACJO,QAAAA,EAAE,EAAEU,MAAM,CAACK,OADP;AAEJjB,QAAAA,QAFI;AAGJC,QAAAA;AAHI;AAFC,KAAD,CAAR;AAQAW,IAAAA,MAAM,CAACK,OAAP,IAAkB,CAAlB;AACD,GAV2B,EAUzB,CAACjB,QAAD,EAAWC,KAAX,CAVyB,CAA5B;AAYA,QAAMiB,QAAQ,GAAG/B,WAAW,CAACe,EAAE,IAAI;AACjCS,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAE,aADC;AAEPJ,MAAAA;AAFO,KAAD,CAAR;AAID,GAL2B,EAKzB,EALyB,CAA5B;AAOA,QAAMiB,QAAQ,GAAGhC,WAAW,CAACe,EAAE,IAAI;AACjCS,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAE,aADC;AAEPJ,MAAAA;AAFO,KAAD,CAAR;AAID,GAL2B,EAKzB,EALyB,CAA5B;AAOA,QAAMkB,KAAK,GAAGlC,OAAO,CAAC,MAAMI,gBAAgB,CAACC,KAAD,CAAvB,EAAgC,CAACA,KAAD,CAAhC,CAArB;AAEA,sBACE;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,QAAQ,EAAEsB,QADZ;AAEE,MAAA,QAAQ,EAAEG,QAFZ;AAGE,MAAA,QAAQ,EAAEhB,QAHZ;AAIE,MAAA,KAAK,EAAEC;AAJT;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEV,KAAjB;AAAwB,MAAA,QAAQ,EAAE2B,QAAlC;AAA4C,MAAA,QAAQ,EAAEC;AAAtD;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA,4DAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD;;GAzDQV,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["/*\r\nuseReducer : useState의 확장판\r\n- 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리할 수 있음(initialize 객체, reducer 함수)\r\nㄴ 바깥에, 별도 파일에 작성해서 불러올 수 있다\r\n- 관리하는 상태 값이 여러개이고 구조가 복잡하다면 useState 대신 쓰면 편하다\r\n- setter를 여러 번 써야 한다면 이를 쓰는 것이 편할 수 있다\r\nㄴ 예)useState Hook을 사용하면서 setUsers와 setInputs가 동시에 쓰임\r\n  => initialize에 한번에 초기화, reducer 함수 하나로 key 값에 따른 값 변경\r\n*/\r\nimport {useReducer, useRef, useMemo, useCallback} from 'react';\r\nimport UserList from './UserList';\r\nimport CreateUser from './CreateUser';\r\n\r\nfunction countActiveUsers(users) {\r\n  console.log('활성 사용자 수를 세는중...');\r\n  return users.filter(user => user.active).length;\r\n}\r\n\r\n// useReducer에 사용되는 상태들을 초기화\r\nconst initialize = {\r\n  inputs: {\r\n    username: '',\r\n    email: ''\r\n  },\r\n  users: [\r\n    {\r\n      id: 1,\r\n      username: 'velopert',\r\n      email: 'public.velopert@gmail.com',\r\n      active: true\r\n   },\r\n   {\r\n      id: 2,\r\n      username: 'tester',\r\n      email: 'tester@example.com',\r\n      active: false\r\n    },\r\n    {\r\n      id: 3,\r\n      username: 'liz',\r\n      email: 'liz@example.com',\r\n      active: false\r\n   }\r\n  ]\r\n};\r\n\r\n// dispatch 함수 안의 객체 요소를 action.객체요소명 형식으로 불러올 수 있음\r\n// state.state객체 형식으로 각 state객체를 불러올 수 있음\r\nfunction reducer(state, action) {\r\n  switch(action.type) {\r\n    case \"CHANGE_INPUT\":\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.name]: action.value\r\n          //state.inputs.[action.name] => state.inputs[usename/email]\r\n        }\r\n      };\r\n    case \"CREATE_USER\":\r\n      return {\r\n        users: [...state.users, action.user],\r\n        inputs: {\r\n          ...state.inputs,\r\n          username: '',\r\n          email: ''\r\n        }\r\n      };\r\n    case \"REMOVE_USER\":\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => user.id !== action.id)\r\n      };\r\n    case \"TOGGLE_USER\":\r\n      return {\r\n        ...state,\r\n        users: state.users.map(user => \r\n          user.id === action.id ? {...user, active: !user.active} : user\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  };\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialize);\r\n  const {users} = state;\r\n  const nextId = useRef(4);\r\n  const {username, email} = state.inputs;\r\n\r\n  console.log(state);\r\n\r\n  const onChange = useCallback(e => {\r\n    const {name, value} = e.target;\r\n    dispatch({\r\n      type: \"CHANGE_INPUT\",\r\n      name,\r\n      value\r\n    });\r\n  }, []);\r\n\r\n  const onCreate = useCallback(() => {\r\n    dispatch({\r\n      type: \"CREATE_USER\",\r\n      user: {\r\n        id: nextId.current,\r\n        username,\r\n        email\r\n      }\r\n    });\r\n    nextId.current += 1;\r\n  }, [username, email]);\r\n\r\n  const onRemove = useCallback(id => {\r\n    dispatch({\r\n      type: \"REMOVE_USER\",\r\n      id\r\n    });\r\n  }, []);\r\n\r\n  const onToggle = useCallback(id => {\r\n    dispatch({\r\n      type: \"TOGGLE_USER\",\r\n      id\r\n    });\r\n  }, []);\r\n\r\n  const count = useMemo(() => countActiveUsers(users), [users]);\r\n\r\n  return (\r\n    <>\r\n      <CreateUser \r\n        onChange={onChange}\r\n        onCreate={onCreate}\r\n        username={username}\r\n        email={email}\r\n      />\r\n      <UserList users={users} onRemove={onRemove} onToggle={onToggle}/>\r\n      <div>활성사용자수 = {count}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}