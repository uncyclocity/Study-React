{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\1-1~1-25\\\\src\\\\Counter.js\";\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0,\n      fixed: 1\n    };\n\n    this.handleIncrease = () => {\n      // this.setState 함수를 사용하려면, button과 연결하면서 컴포넌트 인스턴스와 관계가 끊긴 각 메서드에 바인딩 해주어야 한다.\n      // 위 2가지 방법을 사용하면 된다.\n      this.setState({\n        counter: this.state.counter + 1\n      }, () => {\n        console.log('콜백 함수 실행');\n      });\n    };\n\n    this.handleDecrease = () => {\n      // 함수형 업데이트를 사용하면, setState를 복수로 사용할 수 있다.\n      // 그냥 두번 써서 안되는 이유는 setState가 상태를 바꾸는 함수가 아닌, 상태를 바꿔달라고 요청하는 함수이기 때문이다.\n      this.setState(state => ({\n        counter: state.counter - 1\n      }));\n      this.setState(state => ({\n        counter: state.counter - 1\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleIncrease,\n        children: \"+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleDecrease,\n        children: \"-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uBC14\\uB00C\\uC9C0 \\uC54A\\uB294 \\uAC12 : \", this.state.fixed]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:/react/study_react/1-1~1-25/src/Counter.js"],"names":["Component","Counter","state","counter","fixed","handleIncrease","setState","console","log","handleDecrease","render"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAS5BE,KAT4B,GASpB;AACJC,MAAAA,OAAO,EAAE,CADL;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAToB;;AAAA,SAuB5BC,cAvB4B,GAuBX,MAAM;AACnB;AACA;AACA,WAAKC,QAAL,CAAc;AACNH,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB;AADxB,OAAd,EAGI,MAAM;AACFI,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,OALL;AAOH,KAjC2B;;AAAA,SAmC5BC,cAnC4B,GAmCX,MAAM;AACnB;AACA;AACA,WAAKH,QAAL,CAAcJ,KAAK,KAAK;AACpBC,QAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgB;AADL,OAAL,CAAnB;AAGA,WAAKG,QAAL,CAAcJ,KAAK,KAAK;AACpBC,QAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgB;AADL,OAAL,CAAnB;AAGH,KA5C2B;AAAA;;AA8C5BO,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,kBAAK,KAAKR,KAAL,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKE,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKI,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAKI;AAAA,gEAAe,KAAKP,KAAL,CAAWE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAxD2B;;AA2DhC,eAAeH,OAAf","sourcesContent":["import {Component} from 'react';\r\n\r\nclass Counter extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         counter: 0\r\n    //     };\r\n    // }\r\n\r\n    // 화살표 함수로 메소드 작성하는 class-properties 문법이면, 굳이 constructor 작성 안해도 state 셋팅 가능\r\n    state = {\r\n        counter: 0,\r\n        fixed: 1\r\n    };\r\n\r\n    // 방법 1 : 생성자 메소드(constructor)에서 bind 작업 하기\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.handleIncrease = this.handleIncrease.bind(this);\r\n    //     this.handleDecrease = this.handleDecrease.bind(this);\r\n    // }\r\n\r\n    // 이렇게 클래스 내부에 종속된 함수를 '메서드'라고 부른다. 보통 이름이 handle로 시작함(의무아님)\r\n    // 방법 2 : 화살표 함수 문법 사용 - 클래스에 특정 속성 선언 가능케 해주는 class-properties 문법 사용, CRA 프로젝트에서 널리 사용\r\n    handleIncrease = () => {\r\n        // this.setState 함수를 사용하려면, button과 연결하면서 컴포넌트 인스턴스와 관계가 끊긴 각 메서드에 바인딩 해주어야 한다.\r\n        // 위 2가지 방법을 사용하면 된다.\r\n        this.setState({\r\n                counter: this.state.counter + 1\r\n            },\r\n            () => {\r\n                console.log('콜백 함수 실행');\r\n            }\r\n        );\r\n    };\r\n\r\n    handleDecrease = () => {\r\n        // 함수형 업데이트를 사용하면, setState를 복수로 사용할 수 있다.\r\n        // 그냥 두번 써서 안되는 이유는 setState가 상태를 바꾸는 함수가 아닌, 상태를 바꿔달라고 요청하는 함수이기 때문이다.\r\n        this.setState(state => ({\r\n            counter: state.counter - 1\r\n        }));\r\n        this.setState(state => ({\r\n            counter: state.counter - 1\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.counter}</h1>\r\n                <button onClick={this.handleIncrease}>+1</button>\r\n                <button onClick={this.handleDecrease}>-1</button>\r\n                {/* setState에 넣어주지 않은 값은 그 값이 유지된다*/}\r\n                <p>바뀌지 않는 값 : {this.state.fixed}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}