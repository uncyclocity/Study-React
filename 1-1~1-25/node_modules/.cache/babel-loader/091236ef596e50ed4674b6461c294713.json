{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const users = [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com'\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com'\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com'\n  }]; // useRef를 사용할 때 파라미터를 넣어 줄 경우, 파라미터 값이 .current의 기본 값이 된다.\n  // 값을 수정할 때는 .current 값을 수정, 조회 할 때도 .current 값을 조회하면 됨\n\n  const nextId = useRef(4);\n\n  const onCreate = () => {\n    // 배열 값 추가하는 로직을 여기에 입력\n    nextId.current += 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"8Ki10oRx7tglSX8xsQD9cibzOZw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["useRef","UserList","CreateUser","App","users","id","username","email","nextId","onCreate","current"],"mappings":";;;AAAA,SAAQA,MAAR,QAAqB,OAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,KAAK,GAAG,CACZ;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,QAAQ,EAAE,UAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GADY,EAMZ;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,QAAQ,EAAE,QAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GANY,EAWZ;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,QAAQ,EAAE,KAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GAXY,CAAd,CADa,CAmBb;AACA;;AACA,QAAMC,MAAM,GAAGR,MAAM,CAAC,CAAD,CAArB;;AACA,QAAMS,QAAQ,GAAG,MAAM;AACrB;AACAD,IAAAA,MAAM,CAACE,OAAP,IAAkB,CAAlB;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEN;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAjCQD,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import {useRef} from 'react';\r\nimport UserList from './UserList';\r\nimport CreateUser from './CreateUser';\r\n\r\nfunction App() {\r\n  const users = [\r\n    {\r\n        id: 1,\r\n        username: 'velopert',\r\n        email: 'public.velopert@gmail.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        username: 'tester',\r\n        email: 'tester@example.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        username: 'liz',\r\n        email: 'liz@example.com'\r\n    }\r\n  ];\r\n\r\n  // useRef를 사용할 때 파라미터를 넣어 줄 경우, 파라미터 값이 .current의 기본 값이 된다.\r\n  // 값을 수정할 때는 .current 값을 수정, 조회 할 때도 .current 값을 조회하면 됨\r\n  const nextId = useRef(4);\r\n  const onCreate = () => {\r\n    // 배열 값 추가하는 로직을 여기에 입력\r\n    nextId.current += 1;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CreateUser />\r\n      <UserList users={users}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}