{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\";\nimport Hello from './Hello';\nimport './App.css';\nimport Wrapper from './Wrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const name = 'react'; // 인라인 스타일은 객체 형태로 작성한다\n  // background-color와 같이 -로 구분된 이름들은 backgroundColor와 같은 camelCase 형태로 네이밍 해주어야 함\n\n  const style = {\n    backgroundColor: 'black',\n    color: 'aqua',\n    fontSize: 24,\n    // 기본 단위 = px\n    padding: '1rem' // 다른 단위를 사용하려면 문자열로 설정해주어야 한다.\n\n  };\n  return (\n    /*#__PURE__*/\n    // 태그의 이름이 없는 <></> 형태의 태그는 Fragment이며, 브라우저 상에서 별도의 엘리먼트로 나타나지 않는다.\n    // \n    _jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Hello, {\n        name: \"react\",\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Hello, {\n        color: \"skyblue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: style,\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grey-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["Hello","Wrapper","App","name","style","backgroundColor","color","fontSize","padding"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,GAAG,OAAb,CADa,CAGb;AACA;;AACA,QAAMC,KAAK,GAAG;AACZC,IAAAA,eAAe,EAAE,OADL;AAEZC,IAAAA,KAAK,EAAE,MAFK;AAGZC,IAAAA,QAAQ,EAAE,EAHE;AAGE;AACdC,IAAAA,OAAO,EAAE,MAJG,CAII;;AAJJ,GAAd;AAOA;AAAA;AACE;AACA;AACA,YAAC,OAAD;AAAA,8BAIE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cALF,eAaE;AAAK,QAAA,KAAK,EAAEJ,KAAZ;AAAA,kBAAoBD;AAApB;AAAA;AAAA;AAAA;AAAA,cAbF,eAgBE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAhBF,eAkBE;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AA2BD;;KAvCQD,G;AAyCT,eAAeA,GAAf","sourcesContent":["import Hello from './Hello'\r\nimport './App.css'\r\nimport Wrapper from './Wrapper'\r\n\r\nfunction App() {\r\n  const name = 'react';\r\n  \r\n  // 인라인 스타일은 객체 형태로 작성한다\r\n  // background-color와 같이 -로 구분된 이름들은 backgroundColor와 같은 camelCase 형태로 네이밍 해주어야 함\r\n  const style = {\r\n    backgroundColor: 'black',\r\n    color: 'aqua',\r\n    fontSize: 24, // 기본 단위 = px\r\n    padding: '1rem' // 다른 단위를 사용하려면 문자열로 설정해주어야 한다.\r\n  };\r\n\r\n  return (\r\n    // 태그의 이름이 없는 <></> 형태의 태그는 Fragment이며, 브라우저 상에서 별도의 엘리먼트로 나타나지 않는다.\r\n    // \r\n    <Wrapper>\r\n\r\n      {/* JSX의 태그는 항상 닫아주어야 하며, </> <- 이런식으로 태그 하나로 요약 가능하다. */}\r\n      {/* 컴포넌트에 어떠한 값을 전달할 때, props를 사용한다. 여러개를 전달 할 수 있다.*/}\r\n      <Hello name=\"react\" color=\"blue\"/>\r\n      <Hello color=\"skyblue\"/>\r\n\r\n      {/* 컴포넌트는 여러 번 재사용이 가능하다. */}\r\n      {/* <Hello />\r\n      <Hello />\r\n      <Hello /> */}\r\n\r\n      {/* JSX 내에 JS 변수를 보일 떄는 {}로 감싼다 */}\r\n      <div style={style}>{name}</div>\r\n\r\n      {/* CSS class 설정 시, 'class='가 아닌 'className='으로 설정해주어야 함 */}\r\n      <div className=\"grey-box\"></div>\r\n\r\n      <div\r\n      // 열리는 태그 내부에서는 이렇게 주석 작성이 가능함\r\n      />\r\n\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}