{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\Counter.js\",\n    _s = $RefreshSig$();\n\n// 리액트 패키지에서 'useReducer' 라는 함수를 불러와줌\n// 이를 사용하면 컴포넌트로부터 상태 업데이트 로직을 분리시킬 수 있음(컴포넌트 바깥/별개 문서도 OK)\nimport { useReducer } from 'react'; // 현재 상태와 액션 객체(type)를 받아, 새로운 상태를 반환하는 함수\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  _s();\n\n  const [number, dispatch] = useReducer(reducer, 0);\n\n  const onIncrease = () => {\n    dispatch({\n      type: 'INCREMENT'\n    });\n  };\n\n  const onDecrease = () => {\n    dispatch({\n      type: 'DECREMENT'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onIncrease,\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onDecrease,\n      children: \"-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Counter, \"tox+s13N8TwVlhJ6dsdPiTznuCY=\");\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["C:/react/study_react/src/Counter.js"],"names":["useReducer","reducer","state","action","type","Counter","number","dispatch","onIncrease","onDecrease"],"mappings":";;;AAAA;AACA;AACA,SAAQA,UAAR,QAAyB,OAAzB,C,CAEA;;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACI,aAAOF,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAG,CAAf;;AACJ;AACI,aAAOA,KAAP;AANR;AAQH;;AAED,SAASG,OAAT,GAAmB;AAAA;;AACf,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqBP,UAAU,CAACC,OAAD,EAAU,CAAV,CAArC;;AAEA,QAAMO,UAAU,GAAG,MAAM;AACrBD,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMK,UAAU,GAAG,MAAM;AACrBF,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAA,gBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAlBQJ,O;;KAAAA,O;AAoBT,eAAeA,OAAf","sourcesContent":["// 리액트 패키지에서 'useReducer' 라는 함수를 불러와줌\r\n// 이를 사용하면 컴포넌트로부터 상태 업데이트 로직을 분리시킬 수 있음(컴포넌트 바깥/별개 문서도 OK)\r\nimport {useReducer} from 'react';\r\n\r\n// 현재 상태와 액션 객체(type)를 받아, 새로운 상태를 반환하는 함수\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return state + 1;\r\n        case 'DECREMENT':\r\n            return state - 1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction Counter() {\r\n    const [number, dispatch] = useReducer(reducer, 0);\r\n\r\n    const onIncrease = () => {\r\n        dispatch({type: 'INCREMENT'});\r\n    };\r\n\r\n    const onDecrease = () => {\r\n        dispatch({type: 'DECREMENT'});\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>{number}</h1>\r\n            <button onClick={onIncrease}>+1</button>\r\n            <button onClick={onDecrease}>-1</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}