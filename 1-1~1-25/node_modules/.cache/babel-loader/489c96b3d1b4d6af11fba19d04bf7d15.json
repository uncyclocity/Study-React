{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = inputs;\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  };\n\n  const users = [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com'\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com'\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com'\n  }]; // useRef를 사용할 때 파라미터를 넣어 줄 경우, 파라미터 값이 .current의 기본 값이 된다.\n  // 값을 수정할 때는 .current 값을 수정, 조회 할 때도 .current 값을 조회하면 됨\n\n  const nextId = useRef(4);\n\n  const onCreate = () => {\n    // 배열 값 추가하는 로직을 여기에 입력\n    nextId.current += 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      onChange: onChange,\n      onCreate: onCreate,\n      username: username,\n      email: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"XolqPytAsTIXzRIE0p7u3UO3ZlI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["useRef","useState","UserList","CreateUser","App","inputs","setInputs","username","email","onChange","e","name","value","target","users","id","nextId","onCreate","current"],"mappings":";;;AAAA,SAAQA,MAAR,EAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC;AACnCM,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAAD,CAApC;AAIA,QAAM;AAACD,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBH,MAA1B;;AACA,QAAMI,QAAQ,GAAGC,CAAC,IAAI;AACpB,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,CAAC,CAACG,MAAxB;AACAP,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACM,IAAD,GAAQC;AAFA,KAAD,CAAT;AAID,GAND;;AAQA,QAAME,KAAK,GAAG,CACZ;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIR,IAAAA,QAAQ,EAAE,UAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GADY,EAMZ;AACIO,IAAAA,EAAE,EAAE,CADR;AAEIR,IAAAA,QAAQ,EAAE,QAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GANY,EAWZ;AACIO,IAAAA,EAAE,EAAE,CADR;AAEIR,IAAAA,QAAQ,EAAE,KAFd;AAGIC,IAAAA,KAAK,EAAE;AAHX,GAXY,CAAd,CAda,CAgCb;AACA;;AACA,QAAMQ,MAAM,GAAGhB,MAAM,CAAC,CAAD,CAArB;;AACA,QAAMiB,QAAQ,GAAG,MAAM;AACrB;AACAD,IAAAA,MAAM,CAACE,OAAP,IAAkB,CAAlB;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,QAAQ,EAAET,QADZ;AAEE,MAAA,QAAQ,EAAEQ,QAFZ;AAGE,MAAA,QAAQ,EAAEV,QAHZ;AAIE,MAAA,KAAK,EAAEC;AAJT;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEM;AAAjB;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAWD;;GAnDQV,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import {useRef, useState} from 'react';\r\nimport UserList from './UserList';\r\nimport CreateUser from './CreateUser';\r\n\r\nfunction App() {\r\n  const [inputs, setInputs] = useState({\r\n    username: '',\r\n    email: ''\r\n  });\r\n  const {username, email} = inputs;\r\n  const onChange = e => {\r\n    const {name, value} = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const users = [\r\n    {\r\n        id: 1,\r\n        username: 'velopert',\r\n        email: 'public.velopert@gmail.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        username: 'tester',\r\n        email: 'tester@example.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        username: 'liz',\r\n        email: 'liz@example.com'\r\n    }\r\n  ];\r\n\r\n  // useRef를 사용할 때 파라미터를 넣어 줄 경우, 파라미터 값이 .current의 기본 값이 된다.\r\n  // 값을 수정할 때는 .current 값을 수정, 조회 할 때도 .current 값을 조회하면 됨\r\n  const nextId = useRef(4);\r\n  const onCreate = () => {\r\n    // 배열 값 추가하는 로직을 여기에 입력\r\n    nextId.current += 1;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CreateUser \r\n        onChange={onChange}\r\n        onCreate={onCreate}\r\n        username={username}\r\n        email={email}\r\n      />\r\n      <UserList users={users}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}