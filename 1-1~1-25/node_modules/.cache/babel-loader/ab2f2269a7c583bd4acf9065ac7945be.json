{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\study_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/*\r\nuseReducer : useState의 확장판\r\n- 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리할 수 있음(initialize 객체, reducer 함수)\r\nㄴ 바깥에, 별도 파일에 작성해서 불러올 수 있다\r\n- 관리하는 상태 값이 여러개이고 구조가 복잡하다면 useState 대신 쓰면 편하다\r\n- setter를 여러 번 써야 한다면 이를 쓰는 것이 편할 수 있다\r\nㄴ 예)useState Hook을 사용하면서 setUsers와 setInputs가 동시에 쓰임\r\n  => initialize에 한번에 초기화, reducer 함수 하나로 type 값에 따른 값 변경\r\n*/\nimport React, { useReducer, useMemo } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자 수를 세는중...');\n  return users.filter(user => user.active).length;\n} // useReducer에 사용되는 상태들을 초기화\n\n\nconst initialize = {\n  users: [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com',\n    active: false\n  }]\n}; // dispatch 함수 안의 객체 요소를 action.객체요소명 형식으로 불러올 수 있음\n// state.state객체 형식으로 각 state객체를 불러올 수 있음\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"CREATE_USER\":\n      return {\n        users: [...state.users, action.user]\n      };\n\n    case \"REMOVE_USER\":\n      return {\n        users: state.users.filter(user => user.id !== action.id)\n      };\n\n    case \"TOGGLE_USER\":\n      return {\n        users: state.users.map(user => user.id === action.id ? { ...user,\n          active: !user.active\n        } : user)\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const UserDispatch = /*#__PURE__*/React.createContext(null);\n\nfunction App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialize);\n  const {\n    users\n  } = state;\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return /*#__PURE__*/_jsxDEV(UserDispatch.Provider, {\n    value: dispatch,\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uD65C\\uC131\\uC0AC\\uC6A9\\uC790\\uC218 = \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OnrwDrlSMqAj1WputpVCheCmw58=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/react/study_react/src/App.js"],"names":["React","useReducer","useMemo","UserList","CreateUser","countActiveUsers","users","console","log","filter","user","active","length","initialize","id","username","email","reducer","state","action","type","map","UserDispatch","createContext","App","dispatch","count"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,OAA3B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,SAAOF,KAAK,CAACG,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,MAA1B,EAAkCC,MAAzC;AACD,C,CAED;;;AACA,MAAMC,UAAU,GAAG;AACjBP,EAAAA,KAAK,EAAE,CACL;AACEQ,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,KAAK,EAAE,2BAHT;AAIEL,IAAAA,MAAM,EAAE;AAJV,GADK,EAON;AACGG,IAAAA,EAAE,EAAE,CADP;AAEGC,IAAAA,QAAQ,EAAE,QAFb;AAGGC,IAAAA,KAAK,EAAE,oBAHV;AAIGL,IAAAA,MAAM,EAAE;AAJX,GAPM,EAaL;AACEG,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE,iBAHT;AAIEL,IAAAA,MAAM,EAAE;AAJV,GAbK;AADU,CAAnB,C,CAuBA;AACA;;AACA,SAASM,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,aAAL;AACE,aAAO;AACLd,QAAAA,KAAK,EAAE,CAAC,GAAGY,KAAK,CAACZ,KAAV,EAAiBa,MAAM,CAACT,IAAxB;AADF,OAAP;;AAGF,SAAK,aAAL;AACE,aAAO;AACLJ,QAAAA,KAAK,EAAEY,KAAK,CAACZ,KAAN,CAAYG,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYK,MAAM,CAACL,EAA9C;AADF,OAAP;;AAGF,SAAK,aAAL;AACE,aAAO;AACLR,QAAAA,KAAK,EAAEY,KAAK,CAACZ,KAAN,CAAYe,GAAZ,CAAgBX,IAAI,IACzBA,IAAI,CAACI,EAAL,KAAYK,MAAM,CAACL,EAAnB,GAAwB,EAAC,GAAGJ,IAAJ;AAAUC,UAAAA,MAAM,EAAE,CAACD,IAAI,CAACC;AAAxB,SAAxB,GAA0DD,IADrD;AADF,OAAP;;AAKF;AACE,aAAOQ,KAAP;AAhBJ;AAkBD;;AAED,OAAO,MAAMI,YAAY,gBAAGtB,KAAK,CAACuB,aAAN,CAAoB,IAApB,CAArB;;AAEP,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBxB,UAAU,CAACgB,OAAD,EAAUJ,UAAV,CAApC;AACA,QAAM;AAACP,IAAAA;AAAD,MAAUY,KAAhB;AAEA,QAAMQ,KAAK,GAAGxB,OAAO,CAAC,MAAMG,gBAAgB,CAACC,KAAD,CAAvB,EAAgC,CAACA,KAAD,CAAhC,CAArB;AAEA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEmB,QAA9B;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEnB;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,4DAAeoB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAbQF,G;;KAAAA,G;AAeT,eAAeA,GAAf","sourcesContent":["/*\r\nuseReducer : useState의 확장판\r\n- 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리할 수 있음(initialize 객체, reducer 함수)\r\nㄴ 바깥에, 별도 파일에 작성해서 불러올 수 있다\r\n- 관리하는 상태 값이 여러개이고 구조가 복잡하다면 useState 대신 쓰면 편하다\r\n- setter를 여러 번 써야 한다면 이를 쓰는 것이 편할 수 있다\r\nㄴ 예)useState Hook을 사용하면서 setUsers와 setInputs가 동시에 쓰임\r\n  => initialize에 한번에 초기화, reducer 함수 하나로 type 값에 따른 값 변경\r\n*/\r\nimport React, {useReducer, useMemo} from 'react';\r\nimport UserList from './UserList';\r\nimport CreateUser from './CreateUser';\r\n\r\nfunction countActiveUsers(users) {\r\n  console.log('활성 사용자 수를 세는중...');\r\n  return users.filter(user => user.active).length;\r\n}\r\n\r\n// useReducer에 사용되는 상태들을 초기화\r\nconst initialize = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      username: 'velopert',\r\n      email: 'public.velopert@gmail.com',\r\n      active: true\r\n   },\r\n   {\r\n      id: 2,\r\n      username: 'tester',\r\n      email: 'tester@example.com',\r\n      active: false\r\n    },\r\n    {\r\n      id: 3,\r\n      username: 'liz',\r\n      email: 'liz@example.com',\r\n      active: false\r\n   }\r\n  ]\r\n};\r\n\r\n// dispatch 함수 안의 객체 요소를 action.객체요소명 형식으로 불러올 수 있음\r\n// state.state객체 형식으로 각 state객체를 불러올 수 있음\r\nfunction reducer(state, action) {\r\n  switch(action.type) {\r\n    case \"CREATE_USER\":\r\n      return {\r\n        users: [...state.users, action.user],\r\n      };\r\n    case \"REMOVE_USER\":\r\n      return {\r\n        users: state.users.filter(user => user.id !== action.id)\r\n      };\r\n    case \"TOGGLE_USER\":\r\n      return {\r\n        users: state.users.map(user => \r\n          user.id === action.id ? {...user, active: !user.active} : user\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const UserDispatch = React.createContext(null);\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialize);\r\n  const {users} = state;\r\n\r\n  const count = useMemo(() => countActiveUsers(users), [users]);\r\n\r\n  return (\r\n    <UserDispatch.Provider value={dispatch}>\r\n      <CreateUser/>\r\n      <UserList users={users}/>\r\n      <div>활성사용자수 = {count}</div>\r\n    </UserDispatch.Provider>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}